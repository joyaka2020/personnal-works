security:
    encoders:
        App\Entity\User:
            algorithm: auto

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        login:
            pattern:  ^/api/login
            stateless: true
            anonymous: true
            json_login:
                check_path:               /api/login_check
                success_handler:          lexik_jwt_authentication.handler.authentication_success
                failure_handler:          lexik_jwt_authentication.handler.authentication_failure

        api:
            pattern:   ^/api
            stateless: true
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator
        main:
            anonymous: true
            lazy: true
            provider: app_user_provider
            guard:
                authenticators:
                    - App\Security\LoginFormAuthenticator
            logout:
                path: app_logout
                # where to redirect after logout
                # target: movie_list

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used

    # Les access control sont très génériques, ils permettent d'autoriser l'accès
    # à une page en fonction du rôle de l'utilisateur sans tenir compte d'un quelconque paramètre particulier
    # Ex : Si on veut autoriser l'édition d'un Movie seulement par son auteur ou un ADMIN,
    #      dans les access control, il faudra autoriser l'access à tout le monde puis faire une gestion plus fine ailleurs
    #      «ailleurs» c'est soit dans un contrôleur, soit dans un Voter
    access_control:
        # /admin/{entity} : ROLE_USER
        # /admin/{entity}/add : ROLE_USER
        # /admin/{entity}/edit : ROLE_ADMIN
        # /admin/{entity}/delete : ROLE_ADMIN
        # /admin : ROLE_ADMIN (accès à EasyAdmin)
        # - { path: ^/admin/[a-z]+/(edit|delete), roles: ROLE_ADMIN }
        - { path: ^/, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/admin/[a-z]+, roles: [ROLE_USER, ROLE_ADMIN] }
        - { path: ^/admin, roles: ROLE_ADMIN }
        - { path: ^/\d+, roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/profile, roles: ROLE_USER }
        # \d+ : regex qui indique qu'on prend une chaine de caractère constitué que de nombres
        - { path: ^/api/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        # - { path: ^/api/v1/movies, roles: ROLE_ADMIN }
        - { path: ^/api,       roles: IS_AUTHENTICATED_FULLY }
        

    role_hierarchy:
        ROLE_ADMIN: ROLE_USER
